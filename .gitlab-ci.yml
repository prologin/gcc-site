---

default:
  before_script:
  image: docker:24.0.7

include:
  - template: SAST.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

stages:
  - build
  - qa
  - security

variables:
  # Use now deprecadet License-Scanning
  LICENSE_MANAGEMENT_VERSION: 4

sast:
  stage: security
  interruptible: true
  needs: []

secret_detection:
  stage: security
  interruptible: true
  needs: []

container_scanning:
  stage: security
  interruptible: true
  needs:
    - website
  variables:
    DOCKER_SERVICE: localhost
    DOCKERFILE_PATH: website/Dockerfile
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/website/$CI_COMMIT_REF_SLUG

code_quality:
  stage: qa
  interruptible: true

license_scanning:
  stage: qa
  interruptible: true
  needs: []
  before_script:
    - |
      set -x
      apt update
      apt install -y --no-install-recommends python3 python3-venv
      curl -sSL https://install.python-poetry.org/ | python3 -
      pushd website
      /root/.local/bin/poetry export --format requirements.txt > ../requirements.txt
      popd
  variables:
    LM_PYTHON_VERSION: 3
    LICENSE_FINDER_CLI_OPTS: "--recursive"


.build:
  stage: build
  interruptible: true
  needs: []
  image:
    name: moby/buildkit:latest
    entrypoint: [""]
  before_script:
    - mkdir ~/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > ~/.docker/config.json
  script:
    - |
      echo buildctl-daemonless.sh build --progress=plain \
        --frontend=dockerfile.v0 \
        --local context=$CI_JOB_NAME \
        --local dockerfile=$CI_JOB_NAME \
        --output type=image,\"name=$CI_REGISTRY_IMAGE/$CI_JOB_NAME/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA,$CI_REGISTRY_IMAGE/$CI_JOB_NAME/$CI_COMMIT_REF_SLUG:${CI_COMMIT_TAG:-latest}\",push=true \
        --import-cache type=registry,ref=$CI_REGISTRY_IMAGE/$CI_JOB_NAME:buildcache \
        --export-cache type=registry,ref=$CI_REGISTRY_IMAGE/$CI_JOB_NAME:buildcache,mode=max
      buildctl-daemonless.sh build --progress=plain \
        --frontend=dockerfile.v0 \
        --local context=$CI_JOB_NAME \
        --local dockerfile=$CI_JOB_NAME \
        --output type=image,\"name=$CI_REGISTRY_IMAGE/$CI_JOB_NAME/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA,$CI_REGISTRY_IMAGE/$CI_JOB_NAME/$CI_COMMIT_REF_SLUG:${CI_COMMIT_TAG:-latest}\",push=true \
        --import-cache type=registry,ref=$CI_REGISTRY_IMAGE/$CI_JOB_NAME:buildcache \
        --export-cache type=registry,ref=$CI_REGISTRY_IMAGE/$CI_JOB_NAME:buildcache,mode=max

website:
  extends: .build

lint:website:
  stage: qa
  interruptible: true
  needs:
    - website
  image:
    name: $CI_REGISTRY_IMAGE/website/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
    entrypoint: [""]
  before_script:
    - cd website
  script:
    - prospector --profile ci > prospector-output.xml
  artifacts:
    reports:
      junit: website/prospector-output.xml
  allow_failure: true

lint:shellcheck:
  stage: qa
  interruptible: true
  needs: []
  image:
    name: koalaman/shellcheck-alpine
    entrypoint: [""]
  script:
    - shellcheck --format tty $(find -name '*.sh' -type f)
  allow_failure: false

lint:djlint:
  stage: qa
  interruptible: true
  needs: []
  image:
    name: python:3.12-slim
    entrypoint: [""]
  before_script:
    - cd website
    - pip3 install poetry
    - poetry install || true
  script:
    - poetry run djlint --lint --profile=django .
  allow_failure: false

format:black:
  stage: qa
  interruptible: true
  needs: []
  image:
    name: python:3.12-slim
    entrypoint: [""]
  before_script:
    - cd website
    - pip3 install poetry
    - poetry install || true
  script:
    - poetry run black --check .
    - poetry run isort --check-only .
  allow_failure: false

format:djlint:
  stage: qa
  interruptible: true
  needs: []
  image:
    name: python:3.12-slim
    entrypoint: [""]
  before_script:
    - cd website
    - pip3 install poetry
    - poetry install || true
  script:
    - poetry run djlint --check .
  allow_failure: false


.docker_compose_env: &docker_setup
  interruptible: true
  needs:
    - website
  image:
    name: docker/compose:1.29.2
    entrypoint: [""]
  services:
    - docker:24.0.7-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""

.docker_compose_env_script:
  script:
    - apk update && apk add openssl
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - ./gen_secrets.sh
    - docker pull -q $CI_REGISTRY_IMAGE/website/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/website/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA backend_dev
    - docker-compose pull -q --ignore-pull-failures
    - export COMPOSE_PARALLEL_LIMIT=1000
    - docker network prune --force
    - docker-compose -p "$CI_CONCURRENT_ID" up -d s3_dev db_dev redis_dev
    - sleep 30
    - docker-compose -p "$CI_CONCURRENT_ID" up -d

test:
  stage: qa
  artifacts:
    reports:
      junit: website/test-reports/*.xml
    paths:
      - artifacts/
      - website/artifacts
    when: always
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+\%)$/'
  before_script:
    - mkdir artifacts website/artifacts
    - chmod a+rwx artifacts website/artifacts
  script:
    - cd docker/
    - !reference [.docker_compose_env_script, script]
    - docker-compose -p "$CI_CONCURRENT_ID" exec -T backend_dev coverage run --source='.' ./manage.py test
    - docker-compose -p "$CI_CONCURRENT_ID" exec -T backend_dev coverage report
    - docker-compose -p "$CI_CONCURRENT_ID" exec -T backend_dev coverage html -d /app/gccsite/artifacts/coverage/
    - cd ..
  after_script:
    - cd docker/
    - docker-compose -p "$CI_CONCURRENT_ID" logs -t --no-color > ../artifacts/docker-compose.log
    - docker-compose -p "$CI_CONCURRENT_ID" down -v
  allow_failure: true

django:check_migrations:
  stage: qa
  <<: *docker_setup
  script:
    - cd docker/
    - !reference [.docker_compose_env_script, script]
      # Run once without --check to print on the output (it won't with --check)
    - docker-compose -p "$CI_CONCURRENT_ID" exec -T backend_dev ./manage.py makemigrations --dry-run
    - docker-compose -p "$CI_CONCURRENT_ID" exec -T backend_dev ./manage.py makemigrations --dry-run --check
    - cd ..
  allow_failure: false
